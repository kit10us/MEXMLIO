cmake_minimum_required (VERSION 3.30.0)



#		set(UNIFY_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../unify)
#		if(EXISTS "${UNIFY_DIR}/build/unify.vcxproj")
#			message("Including unify project")
#			include_external_msproject("unify" ${UNIFY_DIR}/build/unify.vcxproj)
#			add_dependencies(${TARGET_NAME} "unify")
#		else()
#			message("Cannot find unify project, skipping (${UNIFY_DIR}/build/unify.vcxproj)")
#		endif()
#		target_include_directories(${TARGET_NAME} PUBLIC ../unify)
#		target_link_libraries(${TARGET_NAME} unify.lib)	

function(AddTargetLibrary TARGET_NAME LIBRARY_NAME LIBRARY_DIR)
	if(MSVC)
		set(LIBRARY_VCXPROJ_FILE ${LIBRARY_DIR}/build/${LIBRARY_NAME}.vcxproj)
		if(EXISTS ${LIBRARY_VCXPROJ_FILE})
			message("Including ${LIBRARY_NAME} project")
			include_external_msproject(${LIBRARY_NAME} ${LIBRARY_VCXPROJ_FILE})
			add_dependencies(${TARGET_NAME} ${LIBRARY_NAME})
		else()
			message("Cannot find ${LIBRARY_NAME} project, skipping")
		endif()		
		target_include_directories(${TARGET_NAME} PUBLIC ${LIBRARY_DIR})
		target_link_libraries(${TARGET_NAME} ${LIBRARY_NAME}.lib)
	endif()
endfunction()

function(AddTargetLibraryOld TARGET_NAME LIBRARY_NAME LIBRARY_DIR)
	if(MSVC)
		set(LIBRARY_VCXPROJ_FILE ${LIBRARY_DIR}/${LIBRARY_NAME}.vcxproj)
		if(EXISTS ${LIBRARY_VCXPROJ_FILE})
			message("Including ${LIBRARY_NAME} project")
			include_external_msproject(${LIBRARY_NAME} ${LIBRARY_VCXPROJ_FILE})
			add_dependencies(${TARGET_NAME} ${LIBRARY_NAME})
		else()
			message("Cannot find ${LIBRARY_NAME} project, skipping")
		endif()		
		target_include_directories(${TARGET_NAME} PUBLIC ${LIBRARY_DIR})
		target_link_libraries(${TARGET_NAME} ${LIBRARY_NAME}.lib)
	endif()
endfunction()